#!/usr/bin/env python3
"""PornHubScanner is a small program made to  let you watch porn videos
in a safe and privacy friendly manner. No more cookies, no more
embarassing browser cache problems, plus no need for flashplayer. The
script relies on qt4 for the gui and on BeautifulSoup library for the
page scraping.
"""

import os
import sys
import urllib.request
import subprocess

from PyQt4 import QtGui
from PyQt4.QtCore import QThread, pyqtSlot

from phscanner.gui import Ui_MainWindow
from phscanner.site import PornHub
from phscanner.downloader import Downloader


class MainWindow(QtGui.QMainWindow, Ui_MainWindow):
    """Class to manage the behaviour of the main window."""

    def __init__(self, parent=None):
        super().__init__()
        self.setupUi(self)
        self.site = PornHub()
        self.catalogue = {}
        self.dlthread = None
        self.downloader = None

        # interface setup
        self.progressBar.hide()
        self.abortButton.hide()

        # connect signals to methods
        self.scanButton.clicked.connect(self.scan)
        self.videoList.itemDoubleClicked.connect(self.action)

    @pyqtSlot()
    def scan(self):
        """Store titles and addresses in a key-value format."""
        self.catalogue.clear()
        self.site.page = self.pageBox.value()

        try:
            self.catalogue = self.site.get_catalogue()
        except (urllib.error.HTTPError, urllib.error.URLError):
            self.lineEdit.setText('Cannot reach the given page!, sorry!')
        else:
            self.videoList.addItems(list(self.catalogue.keys()))

    @pyqtSlot(str)
    def action(self, selected_item):
        """Manage the selected action for the video."""
        selected = selected_item.text()

        try:
            url = self.site.get_video_url(self.catalogue[selected])
        except (urllib.error.HTTPError, urllib.error.URLError):
            self.lineEdit.setText('Cannot reach video page, sorry!')
        except (AttributeError, KeyError):
            print(url)
            self.lineEdit.setText('Cannot retrieve video url, sorry!')
        else:
            if self.actionBox.currentText() == 'Play mode':
                try:
                    self.lineEdit.setText('Launching player ...')
                    subprocess.Popen(['/usr/bin/vlc', '--play-and-exit', url])
                except FileNotFoundError:
                    self.lineEdit.setText('Vlc not found, cmon really?!')
                except TypeError:
                    self.lineEdit.setText('Please try again!')

            else:
                # selected action is 'Download'
                # create an instance of worker and move it to dlthread
                self.dlthread = QThread()
                self.downloader = Downloader(url, selected)
                self.downloader.moveToThread(self.dlthread)

                # connect signals
                self.dlthread.started.connect(self.downloader.start_process)
                self.dlthread.finished.connect(self.download_done)
                self.downloader.finished.connect(self.dlthread.quit)
                self.downloader.reportInfo.connect(self.update_progress)
                self.abortButton.clicked.connect(self.download_done)
                self.lineEdit.setText('Downloading ...')
                self.progressBar.show()
                self.abortButton.show()
                self.videoList.setDisabled(True)
                self.dlthread.start()

    @pyqtSlot(int)
    def update_progress(self, percentage):
        """Update progressbar with the received value."""
        self.progressBar.setValue(percentage)

    @pyqtSlot()
    def download_done(self):
        """Manage stuff  when download is stopped or complete."""
        if self.dlthread.isRunning():
            self.downloader.exiting = True
            self.lineEdit.setText('Download aborted!')
            self.dlthread.quit()
            self.dlthread.wait()
            os.remove(self.downloader.video_title)

        # update interface
        self.progressBar.hide()
        self.abortButton.hide()
        self.lineEdit.clear()
        self.videoList.setEnabled(True)

    def closeEvent(self, event):
        """Executed when main thread is closed."""
        if self.dlthread:
            self.download_done()


def main():
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    app.exec_()

if __name__ == '__main__':
    main()
