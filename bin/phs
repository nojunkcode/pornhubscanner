#!/usr/bin/env python3

import os
import subprocess as sp
import sys
import urllib.request

from PyQt4 import QtGui
from PyQt4.QtCore import QThread

import phscanner.actions
from phscanner.interfaces import downloader, main, popup
from phscanner.site import PHub


class DownloadWidget(QtGui.QWidget, downloader.Ui_Download):
    """Manage the behaviour of the widget used for downloads."""

    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def update_progressbar(self, value):
        self.progressBar.setValue(value)

    def closeEvent(self, event):
        # If widget is closed we abort the download by simulating a
        # click event of the abortButton
        self.abortButton.click()


class PopupDialog(QtGui.QDialog, popup.Ui_Dialog):
    """Manage the behaviour of the dialog widget."""
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class MainWindow(QtGui.QMainWindow, main.Ui_MainWindow):
    """Manage the behaviour of the main window."""

    def __init__(self, parent=None):
        super().__init__()
        self.setupUi(self)
        self.site = PHub()
        self.popup = PopupDialog()

        # These are initialized with empty values here only for
        # readability, their true use and values are set later
        self.catalogue = {}
        self.dlthread = None
        self.dlproc = None

        # Signal to method connections
        self.scanButton.clicked.connect(self.scan)
        self.playButton.clicked.connect(self.play)
        self.videoList.itemDoubleClicked.connect(self.play)
        self.downloadButton.clicked.connect(self.download)

    def scan(self):
        """
        Return a dictionary in which each key is a title and its value
        is the address of the page containing the direct video url.
        """
        self.catalogue.clear()
        self.site.page = self.pageBox.value()
        try:
            self.catalogue = self.site.get_catalogue()

        except (urllib.error.HTTPError, urllib.error.URLError):
            print('Cannot reach the given page!')

        else:
            self.videoList.addItems(list(self.catalogue.keys()))
            self.playButton.setEnabled(True)
            self.downloadButton.setEnabled(True)
            print('Page scanned succesfully!')

    def get_url(self):
        """Return the video title and its direct url. The function
        attempts 10 times to get a valid url, if it fails an URLError
        exception will be raised."""
        item = self.videoList.currentItem().text()
        attempts = 0
        while attempts < 10:
            try:
                url = self.site.get_video_url(self.catalogue[item])
                with urllib.request.urlopen(url) as request:
                    assert request.code == 200

            except (urllib.error.HTTPError, urllib.error.URLError):
                attempts += 1
                print("Can't reach page, retrying ... {0}".format(attempts))
                continue

            except AssertionError:
                attempts += 1
                print("Got an invalid url, retrying ... {0}".format(attempts))
                continue

            else:
                return item, url

        msg = 'All attempts to get a valid url failed. Giving up ... '
        raise urllib.error.URLError(msg)

    def play(self):
        """Open the video url in the vlc media player. If vlc is not
        installed or is not in PATH, an exception will be raised, and
        the user will be notified with a popup window"""
        try:
            sp.Popen(['vlc', '--play-and-exit', self.get_url()[1]])

        except FileNotFoundError:
            print('vlc not installed')
            self.popup.errorLabel.setText('Vlc is not installed!')
            self.popup.show()

    def download(self):
        """Manages the download of the selected video. The download
        process will be launched in a separated thread so it won't block
        the main interface."""
        title, url = self.get_url()
        self.dlthread = QThread()
        self.dlproc = phscanner.actions.DownloadProcess(url, title)
        self.dlproc.moveToThread(self.dlthread)

        # Connect thread and process signals
        self.dlthread.started.connect(self.dlproc.start_process)
        self.dlproc.finished.connect(self.dlthread.quit)
        self.dlthread.finished.connect(self.download_done)

        # Initialize Downloader widget
        self.dw = DownloadWidget()
        self.dlproc.report.connect(self.dw.update_progressbar)
        self.dw.abortButton.clicked.connect(self.download_done)
        self.dw.show()

        self.videoList.setDisabled(True)
        self.dlthread.start()

    def download_done(self):
        """Manage the end of the interruption of the download process.
        If the process is interrupted, the partially downloaded file
        will be deleted."""
        if self.dlthread.isRunning():
            self.dlproc.exiting = True
            self.dlthread.quit()
            self.dlthread.wait()
            try:
                os.remove(self.dlproc.title)

            except OSError as error:
                print(error.strerror)

        self.videoList.setEnabled(True)
        self.dw.close()

    def closeEvent(self, event):
        if self.dlthread:
            self.download_done()


def main():
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
